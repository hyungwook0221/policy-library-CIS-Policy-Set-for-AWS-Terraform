# This policy requires that the `max_password_age` attribute of the `aws_iam_account_password_policy`
# resource is according to CIS standards.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Params

# password_expiry_days refers to the time after which the password is supposed to expire
# `max_password_age` attribute of the `aws_iam_account_password_policy` resource must be less than or equal to password_expiry_days.
param password_expiry_days default 90

# Constants

const = {
	"policy_name":                              "iam-password-expiry",
	"resource_aws_iam_account_password_policy": "aws_iam_account_password_policy",
	"max_password_age":                         "max_password_age",
}

# Functions
generate_violation_message = func(violation) {
	if violation.values[const.max_password_age] is not defined {
		return "'aws_iam_account_password_policy' 리소스의 'max_password_age' 속성은 " + string(password_expiry_days) + "일 이하여야 합니다. 자세한 내용은 https://docs.aws.amazon.com/securityhub/latest/userguide/iam-controls.html#iam-17 을 참조하세요."
	}
	return "'aws_iam_account_password_policy' 리소스의 'max_password_age' 속성 값 " + string(violation.values[const.max_password_age]) + "은(는) " + string(password_expiry_days) + "일 이하여야 합니다. 자세한 내용은 https://docs.aws.amazon.com/securityhub/latest/userguide/iam-controls.html#iam-17 을 참조하세요."
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_iam_account_password_policy).resources
violations = collection.reject(resources, func(res) {
	key = "values.max_password_age"
	return maps.has(res, key) and maps.get(res, key) <= password_expiry_days
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        generate_violation_message(v),
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
