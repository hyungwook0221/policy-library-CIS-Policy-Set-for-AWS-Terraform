# This policy requires that the `minimum_password_length` attribute of the `aws_iam_account_password_policy`
# resource is according to CIS standards.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Params
# password_length refers to the min password length allowed by this policy
# `minimum_password_length` attribute of the `aws_iam_account_password_policy` resource must be greater than or equal to password_length.
param password_length default 14

# Constants
const = {
	"policy_name":                              "iam-password-length",
	"resource_aws_iam_account_password_policy": "aws_iam_account_password_policy",
	"minimum_password_length":                  "minimum_password_length",
}

# Functions
generate_violation_message = func(violation) {
	if violation.values[const.minimum_password_length] is not defined {
		return "'aws_iam_account_password_policy' 리소스의 'minimum_password_length' 속성은 " + string(password_length) + " 이상이어야 합니다. 자세한 내용은 https://docs.aws.amazon.com/securityhub/latest/userguide/iam-controls.html#iam-15 를 참조하세요."
	}
	return "'aws_iam_account_password_policy' 리소스의 'minimum_password_length' 속성 값 " + string(violation.values[const.minimum_password_length]) + "은(는) " + string(password_length) + " 이상이어야 합니다. 자세한 내용은 https://docs.aws.amazon.com/securityhub/latest/userguide/iam-controls.html#iam-15 를 참조하세요."
}

# Variables
resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_iam_account_password_policy).resources
violations = collection.reject(resources, func(res) {
	key = "values.minimum_password_length"
	return maps.has(res, key) and maps.get(res, key) >= password_length
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        generate_violation_message(v),
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
